public class Donut {
    static final int screen_width = 80;
    static final int screen_height = 24;

    static final float theta_spacing = 0.07f;
    static final float phi_spacing = 0.02f;
    static final float R1 = 1;
    static final float R2 = 2;
    static final float K2 = 5;
    static final float pi = 3.14159f;

    static final float K1 = screen_width * K2 * 3 / (8 * (R1 + R2));
    static final char[] luminanceChars = ".,-~:;=!*#$@".toCharArray();

    public static void renderFrame(float A, float B) {
        char[] output = new char[screen_width * screen_height];
        float[] zbuffer = new float[screen_width * screen_height];

        for (int i = 0; i < output.length; i++) {
            output[i] = ' ';
            zbuffer[i] = 0;
        }

        float cosA = (float) Math.cos(A), sinA = (float) Math.sin(A);
        float cosB = (float) Math.cos(B), sinB = (float) Math.sin(B);

        for (float theta = 0; theta < 2 * pi; theta += theta_spacing) {
            float costheta = (float) Math.cos(theta);
            float sintheta = (float) Math.sin(theta);

            for (float phi = 0; phi < 2 * pi; phi += phi_spacing) {
                float cosphi = (float) Math.cos(phi);
                float sinphi = (float) Math.sin(phi);

                float circlex = R2 + R1 * costheta;
                float circley = R1 * sintheta;

                float x = circlex * (cosB * cosphi + sinA * sinB * sinphi) - circley * cosA * sinB;
                float y = circlex * (sinB * cosphi - sinA * cosB * sinphi) + circley * cosA * cosB;
                float z = K2 + cosA * circlex * sinphi + circley * sinA;
                float ooz = 1 / z;

                int xp = (int) (screen_width / 2 + K1 * ooz * x);
                int yp = (int) (screen_height / 2 - K1 * ooz * y);

                int idx = xp + screen_width * yp;

                float L = cosphi * costheta * sinB
                        - cosA * costheta * sinphi
                        - sinA * sintheta
                        + cosB * (cosA * sintheta - costheta * sinA * sinphi);

                if (L > 0 && xp >= 0 && xp < screen_width && yp >= 0 && yp < screen_height) {
                    if (ooz > zbuffer[idx]) {
                        zbuffer[idx] = ooz;
                        int luminance_index = (int) (L * 8);
                        if (luminance_index >= luminanceChars.length)
                            luminance_index = luminanceChars.length - 1;
                        output[idx] = luminanceChars[luminance_index];
                    }
                }
            }
        }

        System.out.print("\u001b[H"); // ANSI escape code to move cursor to home position
        for (int i = 0; i < screen_height; i++) {
            for (int j = 0; j < screen_width; j++) {
                System.out.print(output[i * screen_width + j]);
            }
            System.out.println();
        }
    }

    public static void main(String[] args) throws InterruptedException {
        float A = 0, B = 0;
        while (true) {
            renderFrame(A, B);
            A += 0.04;
            B += 0.08;
            Thread.sleep(30); // 30ms delay
        }
    }
}
